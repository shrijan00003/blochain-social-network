{"version":3,"sources":["helpers/web3Helper.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["loadWeb3","a","window","ethereum","web3","Web3","enable","currentProvider","alert","getAccount","eth","getAccounts","accounts","getNetworkId","net","getId","networkId","getSocialNetworkContract","SocialNetwork","networks","networkData","socialNetworkContract","Contract","abi","address","Promise","reject","getPosts","data","error","methods","postCount","call","posts","index","post","push","createPost","content","from","contract","send","gas","then","receipt","console","log","location","reload","catch","err","tipPost","id","tipAmount","etherAmount","utils","toWei","value","once","Main","props","postContent","createRef","className","role","style","maxWidth","onSubmit","event","preventDefault","current","type","ref","placeholder","required","map","key","width","height","alt","author","src","Identicon","toString","fromWei","onClick","initialState","account","socialNetwork","App","useEffect","useState","state","setState","setError","s","getDataAsync","href","postId","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uaAGA,MAEaA,EAAQ,uCAAG,sBAAAC,EAAA,0DAClBC,OAAOC,SADW,uBAEpBD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,UAFV,SAGdD,OAAOC,SAASG,SAHF,6BAIXJ,OAAOE,KAChBF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAEnCL,OAAOM,MACL,uEARkB,2CAAH,qDAaRC,EAAU,uCAAG,8BAAAR,EAAA,6DAClBG,EAAOF,OAAOE,KADI,SAEDA,EAAKM,IAAIC,cAFR,cAElBC,EAFkB,yBAGjBA,EAAWA,EAAS,GAAK,MAHR,2CAAH,qDAMVC,EAAY,uCAAG,4BAAAZ,EAAA,sEACFC,OAAOE,KAAKM,IAAII,IAAIC,QADlB,cACpBC,EADoB,yBAEnBA,GAFmB,2CAAH,qDAKZC,EAAwB,uCAAG,8BAAAhB,EAAA,+EAEmBY,IAFnB,mCAEVK,EAAcC,SAFJ,kBAE9BC,EAF8B,gCAI5BC,EAAwB,IAAInB,OAAOE,KAAKM,IAAIY,SAChDJ,EAAcK,IACdH,EAAYI,SANoB,kBAQ3BH,GAR2B,mFAW7BI,QAAQC,OAAR,OAX6B,0DAAH,qDAexBC,EAAQ,uCAAG,oCAAA1B,EAAA,sEACcgB,IADd,UAChBI,EADgB,gDAGb,CACLO,KAAM,KACNC,MAAO,sDALW,uBAOER,EAAsBS,QAAQC,YAAYC,OAP5C,UAOhBD,EAPgB,OAQlBE,EAAQ,KACRF,EAAY,GATM,iBAUXG,EAAQ,EAVG,aAUAA,GAASH,GAVT,kCAWCV,EAAsBS,QAAQG,MAAMC,GAAOF,OAX5C,QAWZG,EAXY,OAYlBF,EAAMG,KAAKD,GAZO,QAUoBD,IAVpB,iDAef,CACLN,KAAM,CACJG,YACAE,SAEFJ,MAAO,OApBa,4CAAH,qDAwBRQ,EAAU,uCAAG,WAAOC,EAASC,GAAhB,eAAAtC,EAAA,sEACDgB,IADC,UAClBuB,EADkB,wDAMxB,IACEA,EAASV,QACNO,WAAWC,GACXG,KAAK,CAAEF,OAAMG,IA1EF,MA2EXC,KAAKC,IACJC,QAAQC,IAAI,iCAAkCF,GAC9C1C,OAAO6C,SAASC,WAEjBC,MAAMC,GAAOL,QAAQC,IAAI,6BAA8BI,IAC1D,MAAOrB,GACPgB,QAAQC,IAAI,gDAAiDjB,GAhBvC,2CAAH,wDAoBVsB,EAAO,uCAAG,WAAOC,EAAIb,EAAMc,EAAY,OAA7B,iBAAApD,EAAA,6DACfqD,EAAcpD,OAAOE,KAAKmD,MAAMC,MAAMH,EAAW,SADlC,SAEEpC,IAFF,UAEfuB,EAFe,wDAMrB,IACEA,EAASV,QACNqB,QAAQC,GACRX,KAAK,CAAEF,OAAMkB,MAAOH,EAAaZ,IA9FtB,MA+FXgB,KAAK,UAAWd,IACfC,QAAQC,IAAI,iCAAkCF,KAElD,MAAOf,GACPgB,QAAQC,IAAI,+BAAgCjB,GAdzB,2CAAH,wDCrFL,SAAS8B,EAAKC,GAC3B,MAAMC,EAAcC,oBAAU,MAC9B,OACE,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,OACb,0BACEC,KAAK,OACLD,UAAU,4BACVE,MAAO,CAAEC,SAAU,UAEnB,yBAAKH,UAAU,2BACb,0BACEI,SAAUC,IACRA,EAAMC,iBACN,MAAM/B,EAAUuB,EAAYS,QAAQb,MACpCG,EAAMvB,WAAWC,KAGnB,yBAAKyB,UAAU,sBACb,2BACEX,GAAG,cACHmB,KAAK,OACLC,IAAKX,EACLE,UAAU,eACVU,YAAY,uBACZC,UAAQ,KAGZ,4BAAQH,KAAK,SAASR,UAAU,6BAAhC,UAIDH,EAAM3B,MAAM0C,IAAI,CAACxC,EAAMyC,IAEpB,yBAAKb,UAAU,YAAYa,IAAKA,GAC9B,yBAAKb,UAAU,eACb,yBACEA,UAAU,OACVc,MAAM,KACNC,OAAO,KACPC,IAAK5C,EAAK6C,OACVC,IAAG,gCAA2B,IAAIC,IAChC/C,EAAK6C,OACL,IACAG,cAEJ,2BAAOpB,UAAU,cAAc5B,EAAK6C,SAEtC,wBAAI5B,GAAG,WAAWW,UAAU,+BAC1B,wBAAIA,UAAU,mBACZ,2BAAI5B,EAAKG,UAEX,wBAAIsC,IAAKA,EAAKb,UAAU,wBACtB,2BAAOA,UAAU,8BAAjB,QAEG7D,OAAOE,KAAKmD,MAAM6B,QACjBjD,EAAKkB,UAAU8B,WACf,SAJJ,OAQA,4BACEpB,UAAU,uCACVsB,QAAS,IAAMzB,EAAMT,QAAQhB,EAAKiB,GAAI,QAFxC,uBCnDtB,MAAMkC,EAAe,CACnBC,QAAS,GACTC,cAAe,KACfzD,UAAW,EACXE,MAAO,IA2EMwD,MAzEf,WACEC,oBAAU,KACR1F,KACC,IAHU,QAKa2F,mBAASL,GALtB,mBAKNM,EALM,KAKCC,EALD,OAMaF,mBAAS,IANtB,mBAMN9D,EANM,KAMCiE,EAND,KAQbJ,oBAAU,MACU,uCAAG,wCAAAzF,EAAA,sEACGQ,IADH,cACb8E,EADa,OAEnBM,EAASE,GAAC,eAAUA,EAAV,CAAaR,aAFJ,SAIiBtE,IAJjB,cAIbI,EAJa,SAMjBwE,EAASE,GAAC,eAAUA,EAAV,CAAaP,cAAenE,KANrB,UASWM,IATX,oBASXE,EATW,EASXA,MAAOD,EATI,EASJA,MACXC,EAVe,wBAWjBiE,EAASjE,GAXQ,2BAcXI,EAAqBL,EAArBK,OAAOF,EAAcH,EAAdG,WACC,GACd8D,EAASE,GAAC,eAAUA,EAAV,CAAa9D,QAAOF,eAhBb,4CAAH,qDAmBlBiE,IACC,IA7BU,MA+BLT,EAAYK,EAAZL,QAWR,OAHI1D,GACFgB,QAAQC,IAAI,+BAAgCjB,GAG5C,6BACE,yBAAKkC,UAAU,6EACb,uBAAGA,UAAU,sCAAsCkC,KAAK,KAAxD,6BAGA,wBAAIlC,UAAU,mBACZ,wBAAIA,UAAU,oDACZ,2BAAOA,UAAU,cACf,2BAAOX,GAAG,WAAV,WAA6BmC,GAC5BA,EACC,yBACExB,UAAU,OACVc,MAAM,KACNC,OAAO,KACPC,IAAI,eACJE,IAAG,gCAA2B,IAAIC,IAChCK,EACA,IACAJ,cAEF,SAKZ,kBAACxB,EAAD,CAAM1B,MAAO2D,EAAM3D,MAAOI,WAnCVC,IAClBD,EAAWC,EAASsD,EAAML,UAkC2BpC,QAhCtC,CAAC+C,EAAQ7C,KACxBF,EAAQ+C,EAAQN,EAAML,QAASlC,QC5Cf8C,QACW,cAA7BjG,OAAO6C,SAASqD,UAEe,UAA7BlG,OAAO6C,SAASqD,UAEhBlG,OAAO6C,SAASqD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAKkE,IACjCA,EAAaC,gB","file":"static/js/main.84d34ed0.chunk.js","sourcesContent":["import Web3 from \"web3\";\nimport SocialNetwork from \"../abis/SocialNetwork.json\";\n\nconst GAS_LIMIT = 1000000;\n\nexport const loadWeb3 = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n  } else if (window.web3) {\n    window.web3 = new Web3(window.web3.currentProvider);\n  } else {\n    window.alert(\n      \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n    );\n  }\n};\n\nexport const getAccount = async () => {\n  const web3 = window.web3;\n  const accounts = await web3.eth.getAccounts();\n  return accounts ? accounts[0] : null;\n};\n\nexport const getNetworkId = async () => {\n  const networkId = await window.web3.eth.net.getId();\n  return networkId;\n};\n\nexport const getSocialNetworkContract = async () => {\n  try {\n    const networkData = await SocialNetwork.networks[await getNetworkId()];\n    if (networkData) {\n      const socialNetworkContract = new window.web3.eth.Contract(\n        SocialNetwork.abi,\n        networkData.address\n      );\n      return socialNetworkContract;\n    }\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getPosts = async () => {\n  const socialNetworkContract = await getSocialNetworkContract();\n  if (!socialNetworkContract)\n    return {\n      data: null,\n      error: \"Social Network is not released on current network\"\n    };\n  const postCount = await socialNetworkContract.methods.postCount().call();\n  let posts = [];\n  if (postCount > 0) {\n    for (let index = 1; index <= postCount; index++) {\n      const post = await socialNetworkContract.methods.posts(index).call();\n      posts.push(post);\n    }\n  }\n  return {\n    data: {\n      postCount,\n      posts\n    },\n    error: null\n  };\n};\n\nexport const createPost = async (content, from) => {\n  const contract = await getSocialNetworkContract();\n  if (!contract) {\n    return;\n  }\n\n  try {\n    contract.methods\n      .createPost(content)\n      .send({ from, gas: GAS_LIMIT })\n      .then(receipt => {\n        console.log(\"_____________receipt__________\", receipt);\n        window.location.reload();\n      })\n      .catch(err => console.log(\"_____________err__________\", err));\n  } catch (error) {\n    console.log(\"_____________error in creating post__________\", error);\n  }\n};\n\nexport const tipPost = async (id, from, tipAmount = \"0.1\") => {\n  const etherAmount = window.web3.utils.toWei(tipAmount, \"Ether\");\n  const contract = await getSocialNetworkContract();\n  if (!contract) {\n    return;\n  }\n  try {\n    contract.methods\n      .tipPost(id)\n      .send({ from, value: etherAmount, gas: GAS_LIMIT })\n      .once(\"receipt\", receipt => {\n        console.log(\"_____________receipt__________\", receipt);\n      });\n  } catch (error) {\n    console.log(\"_____________error__________\", error);\n  }\n};\n","import React, { createRef } from \"react\";\nimport Identicon from \"identicon.js\";\n\nexport default function Main(props) {\n  const postContent = createRef(null);\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main\n          role=\"main\"\n          className=\"col-lg-12 ml-auto mr-auto\"\n          style={{ maxWidth: \"500px\" }}\n        >\n          <div className=\"content mr-auto ml-auto\">\n            <form\n              onSubmit={event => {\n                event.preventDefault();\n                const content = postContent.current.value;\n                props.createPost(content);\n              }}\n            >\n              <div className=\"form-group mr-sm-2\">\n                <input\n                  id=\"postContent\"\n                  type=\"text\"\n                  ref={postContent}\n                  className=\"form-control\"\n                  placeholder=\"What's on your mind?\"\n                  required\n                />\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                Share\n              </button>\n            </form>\n            {props.posts.map((post, key) => {\n              return (\n                <div className=\"card mb-4\" key={key}>\n                  <div className=\"card-header\">\n                    <img\n                      className=\"mr-2\"\n                      width=\"30\"\n                      height=\"30\"\n                      alt={post.author}\n                      src={`data:image/png;base64,${new Identicon(\n                        post.author,\n                        30\n                      ).toString()}`}\n                    />\n                    <small className=\"text-muted\">{post.author}</small>\n                  </div>\n                  <ul id=\"postList\" className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\">\n                      <p>{post.content}</p>\n                    </li>\n                    <li key={key} className=\"list-group-item py-2\">\n                      <small className=\"float-left mt-1 text-muted\">\n                        TIPS:\n                        {window.web3.utils.fromWei(\n                          post.tipAmount.toString(),\n                          \"Ether\"\n                        )}\n                        ETH\n                      </small>\n                      <button\n                        className=\"btn btn-link btn-sm float-right pt-0\"\n                        onClick={() => props.tipPost(post.id, \"0.1\")}\n                      >\n                        TIP 0.1 ETH\n                      </button>\n                    </li>\n                  </ul>\n                </div>\n              );\n            })}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","import \"./App.scss\";\nimport Identicon from \"identicon.js\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  loadWeb3,\n  getAccount,\n  getPosts,\n  getSocialNetworkContract,\n  createPost,\n  tipPost\n} from \"../helpers/web3Helper\";\nimport Main from \"./Main\";\n\nconst initialState = {\n  account: \"\",\n  socialNetwork: null,\n  postCount: 0,\n  posts: []\n};\nfunction App() {\n  useEffect(() => {\n    loadWeb3();\n  }, []);\n\n  const [state, setState] = useState(initialState);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const getDataAsync = async () => {\n      const account = await getAccount();\n      setState(s => ({ ...s, account }));\n\n      const socialNetworkContract = await getSocialNetworkContract();\n      if (socialNetworkContract) {\n        setState(s => ({ ...s, socialNetwork: socialNetworkContract }));\n      }\n\n      const { error, data } = await getPosts();\n      if (error) {\n        setError(error);\n        return;\n      }\n      const { posts, postCount } = data;\n      if (postCount > 0) {\n        setState(s => ({ ...s, posts, postCount }));\n      }\n    };\n    getDataAsync();\n  }, []);\n\n  const { account } = state;\n\n  const _createPost = content => {\n    createPost(content, state.account);\n  };\n  const _tipPost = (postId, tipAmount) => {\n    tipPost(postId, state.account, tipAmount);\n  };\n  if (error) {\n    console.log(\"_____________error__________\", error);\n  }\n  return (\n    <div>\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow text-white\">\n        <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">\n          Blockchain Social Network\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-white\">\n              <small id=\"account\">Address:{account}</small>\n              {account ? (\n                <img\n                  className=\"ml-2\"\n                  width=\"30\"\n                  height=\"30\"\n                  alt=\"account icon\"\n                  src={`data:image/png;base64,${new Identicon(\n                    account,\n                    30\n                  ).toString()}`}\n                ></img>\n              ) : null}\n            </small>\n          </li>\n        </ul>\n      </nav>\n      <Main posts={state.posts} createPost={_createPost} tipPost={_tipPost} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}